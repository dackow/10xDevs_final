"""
This module provides functions for interacting with the Ollama AI service
to generate flashcards from text.

It handles API requests, response parsing, and error handling specific to the Ollama API.
"""

import httpx
import json
from typing import List
from fastapi import HTTPException, status
from app.schemas.schemas import FlashcardCreate
import os

OLLAMA_API_URL = os.getenv("OLLAMA_API_URL", "http://localhost:11434")
OLLAMA_MODEL_NAME = os.getenv("OLLAMA_MODEL_NAME", "mistral")


async def generate_flashcards_from_text(text: str, count: int) -> List[FlashcardCreate]:
    """Generates a specified number of flashcards from a given text using the Ollama AI service.

    This function constructs a prompt for the Ollama model, sends a request to the
    Ollama API, and parses the JSON response to create a list of FlashcardCreate objects.
    It also supports a mock mode for testing purposes.

    :param text: The input text from which flashcards are to be generated.
    :type text: str
    :param count: The exact number of flashcards to generate.
    :type count: int
    :raises HTTPException: If there are issues connecting to the Ollama service, the service returns
                           an error status, the response is malformed JSON, or the generated
                           flashcard format is invalid.
    :returns: A list of `FlashcardCreate` objects, each containing a question and an answer.
    :rtype: List[FlashcardCreate]
    :dependencies:
        - `httpx`: For making asynchronous HTTP requests to the Ollama API.
        - `json`: For parsing the JSON response from Ollama.
        - `app.schemas.schemas.FlashcardCreate`: For the return type.
        - `os`: For reading environment variables (`OLLAMA_API_URL`, `OLLAMA_MODEL_NAME`, `OLLAMA_MOCK`).
    :notes:
        - If the `OLLAMA_MOCK` environment variable is set to "true", the function will return
          mock flashcards instead of calling the actual Ollama service.
        - The function expects the Ollama model to return a JSON array of objects with 'question' and 'answer' keys.
    """
    if os.getenv("OLLAMA_MOCK") == "true":
        # For testing purposes, return a list of mock flashcards
        # This avoids calling the actual Ollama service when OLLAMA_MOCK is set
        return [
            FlashcardCreate(
                question=f"Mock question {i + 1} for text: '{text[:20]}...'",
                answer=f"Mock answer {i + 1}"
            )
            for i in range(count)
        ]
    prompt = f"""
    Generate {count} flashcards (question and answer) from the following text. You must generate exactly {count} flashcards, no less, no more.
    Provide the output as a JSON array of objects, where each object has 'question' and 'answer' keys.
    Example:
    [
      {{"question": "What is the capital of France?", "answer": "Paris"}},
      {{"question": "What is the highest mountain in the world?", "answer": "Mount Everest"}}
    ]

    Text:
    {text}
    """

    payload = {
        "model": OLLAMA_MODEL_NAME,
        "prompt": prompt,
        "stream": False
        #"format": "json"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{OLLAMA_API_URL}/api/generate", json=payload, timeout=60.0)
            response.raise_for_status() # Raise an exception for 4xx or 5xx responses

            response_data = response.json()
            # Ollama's /api/generate returns a JSON object with a 'response' field
            # which contains the actual JSON string generated by the model.
            generated_content = response_data.get("response")

            if not generated_content:
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Ollama did not return any generated content."
                )
            
            # The model might return extra text around the JSON, so we need to extract it.
            try:
                # Find the start of the JSON array and the end of it.
                start_index = generated_content.find('[')
                end_index = generated_content.rfind(']')
                if start_index == -1 or end_index == -1:
                    # Raise JSONDecodeError to be caught by the outer exception handler
                    raise json.JSONDecodeError("No JSON array found in response.", generated_content, 0)
                
                json_str = generated_content[start_index:end_index+1]
                flashcards_data = json.loads(json_str)
            except json.JSONDecodeError:
                # Re-raise to be caught by the outer exception handler
                raise

            # Validate the structure of the parsed data
            if not isinstance(flashcards_data, list):
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Ollama returned an invalid flashcard format (not a list)."
                )
            
            flashcards = []
            for item in flashcards_data:
                if not isinstance(item, dict) or "question" not in item or "answer" not in item:
                    raise HTTPException(
                        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                        detail="Ollama returned an invalid flashcard format (missing question/answer)."
                    )
                flashcards.append(FlashcardCreate(question=item["question"], answer=item["answer"]))
            
            return flashcards

    except httpx.RequestError as exc:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Could not connect to Ollama service: {exc}"
        )
    except httpx.HTTPStatusError as exc:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error from Ollama service: {exc.response.status_code} - {exc.response.text}"
        )
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Ollama returned malformed JSON."
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred: {e}"
        )
