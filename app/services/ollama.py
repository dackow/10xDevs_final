import httpx
import json
from typing import List
from fastapi import HTTPException, status
from app.schemas.schemas import FlashcardCreate
import os

OLLAMA_API_URL = os.getenv("OLLAMA_API_URL", "http://localhost:11434")
OLLAMA_MODEL_NAME = os.getenv("OLLAMA_MODEL_NAME", "mistral")


async def generate_flashcards_from_text(text: str, count: int) -> List[FlashcardCreate]:
    prompt = f"""
    Generate {count} flashcards (question and answer) from the following text. You must generate exactly {count} flashcards, no less, no more.
    Provide the output as a JSON array of objects, where each object has 'question' and 'answer' keys.
    Example:
    [
      {{"question": "What is the capital of France?", "answer": "Paris"}},
      {{"question": "What is the highest mountain in the world?", "answer": "Mount Everest"}}
    ]

    Text:
    {text}
    """

    payload = {
        "model": OLLAMA_MODEL_NAME,
        "prompt": prompt,
        "stream": False
        #"format": "json"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{OLLAMA_API_URL}/api/generate", json=payload, timeout=30.0)
            response.raise_for_status() # Raise an exception for 4xx or 5xx responses

            response_data = response.json()
            # Ollama's /api/generate returns a JSON object with a 'response' field
            # which contains the actual JSON string generated by the model.
            generated_content = response_data.get("response")

            if not generated_content:
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Ollama did not return any generated content."
                )
            
            # The model might return extra text around the JSON, so we need to extract it.
            try:
                # Find the start of the JSON array and the end of it.
                start_index = generated_content.find('[')
                end_index = generated_content.rfind(']')
                if start_index == -1 or end_index == -1:
                    # Raise JSONDecodeError to be caught by the outer exception handler
                    raise json.JSONDecodeError("No JSON array found in response.", generated_content, 0)
                
                json_str = generated_content[start_index:end_index+1]
                flashcards_data = json.loads(json_str)
            except json.JSONDecodeError:
                # Re-raise to be caught by the outer exception handler
                raise

            # Validate the structure of the parsed data
            if not isinstance(flashcards_data, list):
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Ollama returned an invalid flashcard format (not a list)."
                )
            
            flashcards = []
            for item in flashcards_data:
                if not isinstance(item, dict) or "question" not in item or "answer" not in item:
                    raise HTTPException(
                        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                        detail="Ollama returned an invalid flashcard format (missing question/answer)."
                    )
                flashcards.append(FlashcardCreate(question=item["question"], answer=item["answer"]))
            
            return flashcards

    except httpx.RequestError as exc:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Could not connect to Ollama service: {exc}"
        )
    except httpx.HTTPStatusError as exc:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error from Ollama service: {exc.response.status_code} - {exc.response.text}"
        )
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Ollama returned malformed JSON."
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred: {e}"
        )
