<#
.SYNOPSIS
    Analizuje najczÄ™Å›ciej zmieniane pliki w repozytorium Git.

.DESCRIPTION
    Ten skrypt PowerShell analizuje historiÄ™ commitÃ³w w repozytorium Git,
    aby zidentyfikowaÄ‡ pliki, ktÃ³re byÅ‚y najczÄ™Å›ciej modyfikowane w okreÅ›lonym okresie.
    Skrypt wyklucza pliki konfiguracyjne, testowe, dokumentacjÄ™, pliki budowania,
    zasoby statyczne i pliki cache Pythona, aby skupiÄ‡ siÄ™ na kodzie ÅºrÃ³dÅ‚owym.
    Dodatkowo, skrypt osobno analizuje i wyÅ›wietla najczÄ™Å›ciej zmieniane pliki testowe.

.PARAMETER Since
    OkreÅ›la okres, od ktÃ³rego majÄ… byÄ‡ analizowane zmiany plikÃ³w.
    Akceptuje formaty zrozumiaÅ‚e dla `git log --since`, np. "1 year ago", "2 months ago", "2023-01-01".
    DomyÅ›lna wartoÅ›Ä‡ to "1 year ago".

.PARAMETER Top
    OkreÅ›la liczbÄ™ top najczÄ™Å›ciej zmienianych plikÃ³w do wyÅ›wietlenia.
    DomyÅ›lna wartoÅ›Ä‡ to 10.

.EXAMPLE
    .\top_modified_files.ps1
    WyÅ›wietla 10 najczÄ™Å›ciej zmienianych plikÃ³w z ostatniego roku, z wyÅ‚Ä…czeniem typowych plikÃ³w pomocniczych.

.EXAMPLE
    .\top_modified_files.ps1 -Since "3 months ago" -Top 5
    WyÅ›wietla 5 najczÄ™Å›ciej zmienianych plikÃ³w z ostatnich 3 miesiÄ™cy.

.NOTES
    Wymaga zainstalowanego Git'a i dostÄ™pu do repozytorium Git.
    Skrypt ignoruje commity scalajÄ…ce (merge commits).
    Wzorce wykluczeÅ„ sÄ… dostosowane do projektÃ³w Python/FastAPI/Supabase.
#> 
# top_modified_files.ps1
# Skrypt PowerShell do analizy najczÄ™Å›ciej zmienianych plikÃ³w w repo (ostatni rok)
# Dostosowany do technologii Python/FastAPI/Supabase
# Autor: [TwÃ³j nick]

param(
    [string]$Since = "1 year ago",
    [int]$Top = 10
)

# Wzorce do wykluczeÅ„ â€“ dostosowane do Twojego stacku
$excludePatterns = @(
    '\.yml$', '\.yaml$', '\.toml$',       # configi
    'test', 'spec',                       # testy (bÄ™dÄ… osobno analizowane)
    '\.md$', 'docs?/',                    # dokumentacja/markdown
    'node_modules', 'dist', 'build',      # build/node
    '\.svg$', '\.png$', '\.jpg$', '\.jpeg$', '\.ico$',  # assety
    '__pycache__', '\.pyc$',              # python cache
    '\.gitignore', '\.env.*'              # ignore/config sensitive
)

# Pobierz listÄ™ zmodyfikowanych plikÃ³w z git log
$files = git log --since="$Since" --pretty=format:"" --name-only --no-merges |
    Where-Object { $_ -ne "" } |
    ForEach-Object { $_.Trim() }

# Filtruj pliki
$filteredFiles = $files | Where-Object {
    $exclude = $false
    foreach ($pattern in $excludePatterns) {
        if ($_ -match $pattern) { $exclude = $true; break }
    }
    -not $exclude
}

# Policz ile razy kaÅ¼dy plik byÅ‚ zmieniany
$stats = $filteredFiles | Group-Object | Sort-Object Count -Descending | Select-Object -First $Top

Write-Host "ðŸ“Š Top $Top zmienianych plikÃ³w (od $Since):" -ForegroundColor Cyan
foreach ($s in $stats) {
    "{0,-50} {1,5} changes" -f $s.Name, $s.Count
}

# Sekcja dodatkowa â€“ analiza testÃ³w
$testFiles = $files | Where-Object { $_ -match '(test|spec)' }
if ($testFiles) {
    Write-Host "`nðŸ§ª NajczÄ™Å›ciej zmieniane pliki testowe:" -ForegroundColor Green
    $testStats = $testFiles | Group-Object | Sort-Object Count -Descending | Select-Object -First 5
    foreach ($s in $testStats) {
        "{0,-50} {1,5} changes" -f $s.Name, $s.Count
    }
}